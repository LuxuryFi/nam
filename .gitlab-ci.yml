stages:
  - Test
  - Build
  - Deploy

variables:
  VARIABLE_DATA: Gitlab-CI-YAML
  DOCKER_HOST: tcp://docker:2375
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  PROJECT_NAME: hashcode
  IMAGE_TAG: ${CI_REGISTRY_IMAGE}/${PROJECT_NAME}

.cache: &cache
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - node_modules/
      - .yarn/

test:
  image: node:latest
  stage: Test
  tags:
    - vmogroup
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_REF_SLUG =~ /^release.*/
      when: on_success
    - if: $CI_COMMIT_REF_SLUG == 'main'
      when: on_success
    - if: $CI_COMMIT_REF_SLUG == 'develop'
      when: on_success
  <<: *cache
  script:
    - yarn
    - yarn test:cov --cacheDirectory ".jestcache"
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths:
      - coverage/
    reports:
      junit:
        - junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

lint:
  image: node:latest
  stage: Test
  tags:
    - vmogroup
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_REF_SLUG == 'main'
      when: on_success
    - if: $CI_COMMIT_REF_SLUG =~ /^release.*/
      when: on_success
    - if: $CI_COMMIT_REF_SLUG == 'develop'
      when: on_success
  <<: *cache
  script:
    - yarn
    - yarn lint

build-dev:
  image: docker:18-git
  services:
    - docker:18-dind
  stage: Build
  tags:
    - vmogroup
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_REF_SLUG == 'develop'
      when: on_success
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: on_success
  script:
    # Where is the environment file?
    - echo $ENV_FILE_DEV
    - cp $ENV_FILE_DEV .env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${CONTAINER_IMAGE} -f Dockerfile .
    - docker tag ${CONTAINER_IMAGE} $IMAGE_TAG:$CI_COMMIT_REF_SLUG
    - docker push $IMAGE_TAG:$CI_COMMIT_REF_SLUG

deploy-dev:
  image: alpine:latest
  stage: Deploy
  tags:
    - vmogroup
  rules:
    - if: $CI_COMMIT_REF_SLUG == 'develop'
      when: on_success
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'develop'
      when: manual
    - when: never
  dependencies:
    - build-dev
  before_script:
    - 'which ssh-agent || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$STAGE_ID_RSA_DEV")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - ssh $STAGE_SERVER_USER_DEV@$STAGE_SERVER_IP_DEV "sudo docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY};"
    - ssh $STAGE_SERVER_USER_DEV@$STAGE_SERVER_IP_DEV "sudo docker stop $PROJECT_NAME || true"
    - ssh $STAGE_SERVER_USER_DEV@$STAGE_SERVER_IP_DEV "sudo docker rm $PROJECT_NAME || true"
    - ssh $STAGE_SERVER_USER_DEV@$STAGE_SERVER_IP_DEV "sudo docker image rm $IMAGE_TAG:$CI_COMMIT_REF_SLUG || true"
    - ssh $STAGE_SERVER_USER_DEV@$STAGE_SERVER_IP_DEV "sudo docker pull $IMAGE_TAG:$CI_COMMIT_REF_SLUG"
    - ssh $STAGE_SERVER_USER_DEV@$STAGE_SERVER_IP_DEV "sudo docker run -d --restart unless-stopped --name $PROJECT_NAME -p 4000:4000 -v /home/$STAGE_SERVER_USER_DEV/cdn:/usr/src/app/files -e "variableData=Docker-Run-Command" $IMAGE_TAG:$CI_COMMIT_REF_SLUG"

build-staging:
  image: docker:18-git
  services:
    - docker:18-dind
  stage: Build
  tags:
    - vmogroup
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_COMMIT_REF_SLUG =~ /^release.*/
      when: on_success
  script:
    # Where is the environment file?
    - echo $ENV_FILE_STAGING
    - cp $ENV_FILE_STAGING .env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${CONTAINER_IMAGE} -f Dockerfile .
    - docker tag ${CONTAINER_IMAGE} $IMAGE_TAG:$CI_COMMIT_REF_SLUG
    - docker tag ${CONTAINER_IMAGE} $IMAGE_TAG:staging
    - docker push $IMAGE_TAG:$CI_COMMIT_REF_SLUG
    - docker push $IMAGE_TAG:staging

deploy-staging:
  image: alpine:latest
  stage: Deploy
  tags:
    - vmogroup
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_COMMIT_REF_SLUG =~ /^release.*/
      when: on_success
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^release.*/
      when: manual
    - when: never
  dependencies:
    - build-staging
  before_script:
    - 'which ssh-agent || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$STAGE_ID_RSA_STAGING")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - ssh $STAGE_SERVER_USER_STAGING@$STAGE_SERVER_IP_STAGING "sudo docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY};"
    - ssh $STAGE_SERVER_USER_STAGING@$STAGE_SERVER_IP_STAGING "sudo docker stop $PROJECT_NAME-staging || true"
    - ssh $STAGE_SERVER_USER_STAGING@$STAGE_SERVER_IP_STAGING "sudo docker rm $PROJECT_NAME-staging || true"
    - ssh $STAGE_SERVER_USER_STAGING@$STAGE_SERVER_IP_STAGING "sudo docker image rm $IMAGE_TAG:staging || true"
    - ssh $STAGE_SERVER_USER_STAGING@$STAGE_SERVER_IP_STAGING "sudo docker pull $IMAGE_TAG:staging"
    - ssh $STAGE_SERVER_USER_STAGING@$STAGE_SERVER_IP_STAGING "sudo docker run -d --restart unless-stopped --name $PROJECT_NAME-staging -p 4001:4000 -v /home/$STAGE_SERVER_USER_STAGING/cdn-staging:/usr/src/app/files -e "variableData=Docker-Run-Command" $IMAGE_TAG:staging"

build-prod:
  image: docker:18-git
  services:
    - docker:18-dind
  stage: Build
  tags:
    - vmogroup
  rules:
    - if: $CI_COMMIT_REF_SLUG == 'main'
      when: on_success
  script:
    # Where is the environment file?
    - echo $ENV_FILE_PROD
    - cp $ENV_FILE_PROD .env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${CONTAINER_IMAGE} -f Dockerfile .
    - docker tag ${CONTAINER_IMAGE} $IMAGE_TAG:$CI_COMMIT_REF_SLUG
    - docker tag ${CONTAINER_IMAGE} $IMAGE_TAG:prod
    - docker push $IMAGE_TAG:$CI_COMMIT_REF_SLUG
    - docker push $IMAGE_TAG:prod

deploy-prod:
  image: alpine:latest
  stage: Deploy
  tags:
    - vmogroup
  rules:
    - if: $CI_COMMIT_REF_SLUG == 'main'
      when: on_success
  dependencies:
    - build-prod
  before_script:
    - 'which ssh-agent || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$STAGE_ID_RSA_PROD")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - >
      ssh $STAGE_SERVER_USER_PROD@$STAGE_SERVER_IP_PROD
      "sudo docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY};
      cd /home/$STAGE_SERVER_USER_PROD/root;
      sudo docker pull $IMAGE_TAG:prod;
      sudo docker compose down backend-prod;
      sudo docker compose up -d backend-prod"
